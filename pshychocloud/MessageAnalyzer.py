# -*- coding: utf-8 -*-
import re
from auxiliaries import clean_line
from constants import REGEX_FLAGS, SPANISH_STOPWORDS
from string import punctuation as punctuation_marks


class MessageAnalyzer(object):


    def _get_clean_words_from_line(self, line):
        ''' 
            This method should be implemeneted en each Analyzer as well. 
            Each of them should filter the custom message generated by 
            the chatting client itself, and afterwards call this method.
            This one, will do general things like removing punctuation 
            marks and stopwords.
        '''
        words_without_punct_marks = filter(lambda char: char not in punctuation_marks, line ).strip().split(' ')
        clean_words = filter(lambda word : word.strip() not in SPANISH_STOPWORDS, words_without_punct_marks)
        return clean_words


    def get_words(self, text, participant=None):
        ''' 
            When no input of parcipnt is provided it means that we shall 
            treat it as a group, therefore we should use the wildcard for
            the type of conversation we're using
        '''
        wildcard = self.participant_wildcard
        regex_string = self.extract_message_regex % (participant or wildcard) #FIX THIS!!
        regex = re.compile(regex_string, REGEX_FLAGS)
        words = []
        for line in text:
            match = regex.match(line)
            if match:
                clean_words = self._get_clean_words_from_line(match.groups()[0])
                words.extend(clean_words)
        return words

    def get_participants(self, text):
        '''
            Function to extract partipants from whateve type of file was provided
            using the regex. 
        '''
        regex_string = self.extract_participant_regex
        regex = re.compile(regex_string, REGEX_FLAGS)
        participants = set()
        for line in text:
            match = regex.match(line)
            if match:
                participants.add(match.groups()[0])
        return participants

